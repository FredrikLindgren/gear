/* Run test */
DEFINE_ACTION_FUNCTION fl#gear#test
  INT_VAR
    equip = 1
    flags = 0
    force = 0
    charge1 = 1
    charge2 = 0
    charge3 = 0
  STR_VAR
    testid = ""
    item = ""
    cre = ""
    source = ""
BEGIN
  PRINT "Running test %testid%"
  LAF fl#gear#test#files STR_VAR cre source RET srcfile dstfile END
  COPY - "%srcfile%"
         "%dstfile%"
    LPF fl#gear
      INT_VAR
        equip
        flags
        force
        charge1
        charge2
        charge3
      STR_VAR
        item
      END
    LPF fl#gear#test#predicates STR_VAR testid item RET failure END
  BUT_ONLY

  ACTION_IF failure BEGIN
    LAF fl#gear#test#save_object
      STR_VAR
        object = EVAL "%dstfile%"
        dest = EVAL "%cre%.cre"
    END
  END
END

/* Test for #usable API */
DEFINE_ACTION_MACRO fl#gear#test#usable#warn BEGIN
  ACTION_IF usable != correct_usable BEGIN
    WARN "WARNING: #usable test failed for usable for test %testid%"
  END
  ACTION_IF available != correct_available BEGIN
    WARN "WARNING: #usable test failed for available for test %testid%"
  END
END

DEFINE_ACTION_FUNCTION fl#gear#test#usable
  INT_VAR
    correct_usable = "-1"
    correct_available = "-2"
  STR_VAR
    testid = ""
    item = ""
    source = ""
    cre = ""
BEGIN
  PRINT "Running #usable test %testid%"
  ACTION_IF "%item%" STR_EQ "" OR
            ("%cre%" STR_EQ "" AND
             "%source%" STR_EQ "")
  BEGIN
    FAIL "Cannot run #usable test without both item and creature"
  END
  LAF fl#gear#test#files STR_VAR cre source RET srcfile dstfile END
  COPY - "%srcfile%" "%dstfile%"
    LPF fl#gear#usable STR_VAR item RET usable available END
  LAM fl#gear#test#usable#warn
  // must also test the item branch, not just the CRE one
END

DEFINE_ACTION_FUNCTION fl#gear#test#files
  STR_VAR
    source = ""
    cre = ""
  RET
    srcfile
    dstfile
BEGIN
  ACTION_IF "%source%" STR_CMP "" BEGIN
    OUTER_SPRINT srcfile "%source%"
  END ELSE BEGIN
    OUTER_SPRINT srcfile "%MOD_FOLDER%/objects/cre/%cre%.cre"
  END
  OUTER_SPRINT dstfile ".../fl#gear#test/inlined/test_object/%cre%.cre"
END

/* Test predicates */
DEFINE_PATCH_FUNCTION fl#gear#test#predicates
  STR_VAR
    testid = ""
    item = ""
  RET
    failure
BEGIN
  failure = 0
  PHP_EACH predicates AS _ => predicate BEGIN
    LPF "fl#gear#test#predicate#%predicate%" STR_VAR item RET true END
    PATCH_IF !true BEGIN
      PATCH_WARN "WARNING: predicate %predicate% failed for test %testid%"
      failure = 1
    END
  END
END

DEFINE_ACTION_FUNCTION fl#gear#test#save_object
  STR_VAR
    object = ""
    dest = ""
BEGIN
  MKDIR "%MOD_FOLDER%/objects/saved"
  GET_DIRECTORY_ARRAY saved "%MOD_FOLDER%/objects/saved" ".+"
  OUTER_SET count = 0
  ACTION_PHP_EACH saved AS _ => dir BEGIN
    ACTION_IF "%dir%" STR_CMP "%MOD_FOLDER%/objects/saved/." AND
              "%dir%" STR_CMP "%MOD_FOLDER%/objects/saved/.."
    BEGIN
      OUTER_SET ++count
    END
  END
  MKDIR "%MOD_FOLDER%/objects/saved/%count%"
  OUTER_SPRINT dest_dir "%MOD_FOLDER%/objects/saved/%count%/%dest%"
  COPY "%object%" "%dest_dir%"
  PRINT "Saved object to %dest_dir%"
END

/* Searches the slot range for the specified item */
DEFINE_PATCH_FUNCTION fl#gear#test#find_item
  INT_VAR
    low_slot = 0
    high_slot = 37
  STR_VAR
    item = ""
  RET
    true
BEGIN
  true = 0
  READ_LONG 0x2b8 iso
  READ_LONG 0x2bc io
  FOR (i = low_slot; i < high_slot; ++i) BEGIN
    READ_SSHORT iso + 0x2 * i ref
    PATCH_IF ref >= 0 BEGIN
      READ_ASCII io + ref * 0x14 value
      PATCH_IF "%value%" STR_EQ "%item%" BEGIN
        true = 1
        i = high_slot
      END
    END
  END
END

/* Test for whether the creature possesses the item */
DEFINE_PATCH_FUNCTION fl#gear#test#predicate#present
  STR_VAR
    item = ""
  RET
    true
BEGIN
  LPF fl#gear#test#find_item STR_VAR item RET true END
END

/* Test for whether the creature has the item equipped */
DEFINE_PATCH_FUNCTION fl#gear#test#predicate#equipped
  STR_VAR
    item = ""
  RET
    true
BEGIN
  LPF fl#gear#test#find_item INT_VAR high_slot = 17 STR_VAR item RET true END
END

/* Inverse test for whether the creature has the item equipped */
DEFINE_PATCH_FUNCTION fl#gear#test#predicate#notequipped
  STR_VAR
    item = ""
  RET
    true
BEGIN
  LPF fl#gear#test#predicate#equipped STR_VAR item RET true END
  SET true = NOT true
END

/* Test for whether the creature has the weapon selected */
DEFINE_PATCH_FUNCTION fl#gear#test#predicate#selected
  STR_VAR
    item = ""
  RET
    true
BEGIN
  true = 0
  READ_LONG 0x2b8 iso
  READ_LONG 0x2bc io
  READ_SSHORT iso + 0x2 * 38 selected
  READ_SSHORT iso + 0x2 * 9 + 0x2 * selected ref
  READ_ASCII io + ref * 0x14 value
  PATCH_IF "%value%" STR_EQ "%item%" BEGIN
    true = 1
  END
END

/* Inverse test for whether the creature has the weapon selected */
DEFINE_PATCH_FUNCTION fl#gear#test#predicate#notselected
  STR_VAR
    item = ""
  RET
    true
BEGIN
  LPF fl#gear#test#predicate#selected STR_VAR item RET true END
  SET true = NOT true
END
