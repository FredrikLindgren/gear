/*
 *  fl#gear - Equipment library
 *  Copyright (C) 2015  Fredrik Lindgren, a.k.a., Wisp
 *
 *  This script is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version. The following additional
 *  permissions apply:
 *
 *  Section 4: Conveying Verbatim Copies
 *  You are only required to retain any existing notices of copyright
 *  and absence of warranty.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this script.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*********************************************************************
 * Public interface
 ********************************************************************/

OUTER_SPRINT fl#gear#version "1.0.0"

/*
 * Gives the specified item to the specified creature, optionally
 * equipping it (boolean equip) unless the appropriate slots are
 * already in use (boolean force).
 */
DEFINE_ACTION_FUNCTION fl#gear
  INT_VAR
    equip = 1
    force = 0
    flags = 0
    charge1 = 0
    charge2 = 0
    charge3 = 0
  STR_VAR
    item = ""
    creature = ""
BEGIN
  COPY_EXISTING "%creature%.cre" override
    LPF fl#gear
      INT_VAR
        equip
        force
        flags
        charge1
        charge2
        charge3
      STR_VAR
        item
    END
END

/*
 * As the action function, except the current buffer must be a valid
 * creature.
 */
DEFINE_PATCH_FUNCTION fl#gear
  INT_VAR
    equip = 1
    force = 0
    flags = 0
    charge1 = 1
    charge2 = 0
    charge3 = 0
  STR_VAR
    item = ""
BEGIN
  INNER_ACTION BEGIN
    LAM fl#gear#setup#array#itemexcl
    LAM fl#gear#setup#array#itemrank
    LAM fl#gear#setup#array#cursed
  END
  LPF fl#gear#equip
    INT_VAR
      force
      flags
      charge1
      charge2
      charge3
    STR_VAR
      item
  END
/*
  LPF give_itm_to_cre
    INT_VAR
      f_Equip = equip
      f_Flags = flags
      Charge1 = charge1
      Charge2 = charge2
      Charge3 = charge3
    STR_VAR
      itm_to_give = EVAL "%item%"
  END
*/
END

/*
 * Determines if the creature can use the item.
 * Boolean usable is true if the creature can use the item.
 * Value available is negative if no slots are available or the number
 * of the first available slot
*/
DEFINE_ACTION_FUNCTION fl#gear#usable
  STR_VAR
    item = ""
    creature = ""
  RET
    usable
    available
BEGIN
  LAF fl#gear#require#itm STR_VAR item RET item = file END
  LAF fl#gear#require#cre STR_VAR creature RET creature = file END
  COPY_EXISTING "%creature%" "override"
    LPF fl#gear#usable STR_VAR item RET usable available END
  BUT_ONLY
END

/*
 * Patch function operating on items or creatures. As the action function, except:
 * if the current buffer is an item, creature argument must be given
 * if the current buffer is a creature, item argument must be given
 */
DEFINE_PATCH_FUNCTION fl#gear#usable
  STR_VAR
    item = ""
    creature = ""
  RET
    usable
    available
BEGIN
  LPF fl#gear#signature RET signature END
  PATCH_MATCH "%signature%" WITH
    "ITM " WHEN "%creature%" STRING_EQUAL_CASE ""
    BEGIN
      PATCH_FAIL "ERROR: patch function fl#gear#usable must recieve creature argument when current buffer is ITM"
    END

    "CRE " WHEN "%item%" STRING_EQUAL_CASE ""
    BEGIN
      PATCH_FAIL "ERROR: patch function fl#gear#usable must recieve item argument when current buffer is CRE"
    END

    "ITM "
    BEGIN
      LPF fl#gear#require#cre STR_VAR creature RET creature = file END
      LPF fl#gear#usable#itm STR_VAR creature RET usable available END
    END

    "CRE "
    BEGIN
      LPF fl#gear#require#itm STR_VAR item RET item = file END
      LPF fl#gear#usable#cre STR_VAR item RET usable available END
    END

    DEFAULT
      PATCH_WARN "WARNING: patch function fl#gear#usable was called on an invalid buffer: %SOURCE_FILE%"
  END
END

/*
 * Setup macro to create the item-exclusion array
 */
DEFINE_ACTION_MACRO fl#gear#setup#array#itemexcl BEGIN
  LOCAL_SPRINT SOURCE_DIRECTORY ""
  LOCAL_SPRINT SOURCE_FILESPEC ""
  LOCAL_SPRINT SOURCE_FILE ""
  LOCAL_SPRINT SOURCE_RES ""
  LOCAL_SPRINT SOURCE_EXT ""
  LOCAL_SPRINT DEST_DIRECTORY ""
  LOCAL_SPRINT DEST_FILESPEC ""
  LOCAL_SPRINT DEST_FILE ""
  LOCAL_SPRINT DEST_RES ""
  LOCAL_SPRINT DEST_EXT ""
  LOCAL_SPRINT item ""
  LOCAL_SET SOURCE_SIZE = 0
  LOCAL_SET i = 0
  COPY_EXISTING itemexcl.2da override
    READ_2DA_ENTRIES_NOW fl#gear#2da#read#itemexcl 2
    FOR (i = 1; i < fl#gear#2da#read#itemexcl; ++i) BEGIN
      READ_2DA_ENTRY_FORMER fl#gear#2da#read#itemexcl i 0 item
      TO_LOWER item
      SET $fl#gear#itemexcl("%item%") = 1
    END
  BUT_ONLY
  OUTER_SET fl#gear#setup#array#itemexcl = 1
END

/*
 * Setup macro to create the item-rank array
 */
DEFINE_ACTION_MACRO fl#gear#setup#array#itemrank BEGIN
  INCLUDE "%fl#gear#dir%/fl#gear#itemrank.tpa" // tmp
  OUTER_SET fl#gear#setup#array#itemrank = 1
END

/*
 * Setup macro to create the cursed-item array
 */
DEFINE_ACTION_MACRO fl#gear#setup#array#cursed BEGIN
  INCLUDE "%fl#gear#dir%/fl#gear#cursed.tpa" // tmp
  OUTER_SET fl#gear#setup#array#cursed = 1
END

/*********************************************************************
 * Private interface
 ********************************************************************/

OUTER_SET fl#gear#setup#array#itemexcl = 0
OUTER_SET fl#gear#setup#array#itemrank = 0
OUTER_SET fl#gear#setup#array#cursed = 0

DEFINE_PATCH_FUNCTION fl#gear#signature
  RET
    signature
    version
BEGIN
  READ_ASCII 0 signature ELSE "fail" (4)
  READ_ASCII 4 version ELSE "fail" (4)
END

/*
 * Checks existence of the specified item and fails if the item does not exist.
 * The item argument may either include a file extension or omit it.
 * String file returns the file name of the item.
 */
DEFINE_ACTION_FUNCTION fl#gear#require#itm
  STR_VAR
    item = ""
  RET
    file
BEGIN
  ACTION_IF ("%item%" STRING_MATCHES_REGEXP ".+\.itm$" = 0 AND
             !FILE_EXISTS_IN_GAME "%item%") OR
            (!"%item%" STRING_MATCHES_REGEXP ".+\.itm$" = 0 AND
             !FILE_EXISTS_IN_GAME "%item%.itm")
  BEGIN
    FAIL "ERROR: fl#gear cannot work with non-existent item %item%"
  END
  ACTION_IF "%item%" STRING_MATCHES_REGEXP ".+\.itm$" = 0 BEGIN
    OUTER_SPRINT file "%item%"
  END ELSE OUTER_SPRINT file "%item%.itm"
END

/*
 * Checks the existence of the specified creature and fails if the creature
 * does not exist. The creature argument may either include a file extension
 * or omit it.
 * String file returns the file name of the creature.
 */
DEFINE_ACTION_FUNCTION fl#gear#require#cre
  STR_VAR
    creature = ""
  RET
    file
BEGIN
  ACTION_IF ("%creature%" STRING_MATCHES_REGEXP ".+\.cre$" = 0 AND
             !FILE_EXISTS_IN_GAME "%creature%") OR
            (!"%creature%" STRING_MATCHES_REGEXP ".+\.cre$" = 0 AND
             !FILE_EXISTS_IN_GAME "%creature%.cre")
  BEGIN
    FAIL "ERROR: fl#gear cannot work with non-existent creature %creature%"
  END
  ACTION_IF "%creature%" STRING_MATCHES_REGEXP ".+\.cre$" = 0 BEGIN
    OUTER_SPRINT file "%creature%"
  END ELSE OUTER_SPRINT file "%creature%.cre"
END

DEFINE_PATCH_FUNCTION fl#gear#require#itm
  STR_VAR
    item = ""
  RET
    file
BEGIN
  INNER_ACTION BEGIN
    LAF fl#gear#require#itm STR_VAR item RET file END
  END
END

DEFINE_PATCH_FUNCTION fl#gear#require#cre
  STR_VAR
    creature = ""
  RET
    file
BEGIN
  INNER_ACTION BEGIN
    LAF fl#gear#require#cre STR_VAR creature RET file END
  END
END

/*
 * Returns sundry properties of the specified item
 */
DEFINE_ACTION_FUNCTION fl#gear#itm#properties
  STR_VAR
    item = ""
  RET
    lower_slot
    upper_slot
    category
    flags
    proficiency
    ranged_weapon
    launcher
    mage_penalty
    thief_penalty
BEGIN
  LAF fl#gear#require#itm STR_VAR item RET item = file END
  COPY_EXISTING "%item%" override
    LPF fl#gear#itm#properties
      RET
        lower_slot
        upper_slot
        category
        flags
        proficiency
        ranged_weapon
        launcher
        mage_penalty
        thief_penalty
    END
  BUT_ONLY
END

/*
 * Returns sundry properties of the item, read
 * from the current buffer
 */
DEFINE_PATCH_FUNCTION fl#gear#itm#properties
  RET
    lower_slot
    upper_slot
    category
    flags
    proficiency
    /* booleans */
    ranged_weapon
    launcher
    mage_penalty
    thief_penalty
BEGIN
  READ_LONG  0x18 flags
  READ_SHORT 0x1c category
  PATCH_IF !ENGINE_IS ~bg1 totsc~ BEGIN
    READ_BYTE 0x31 proficiency
  END ELSE proficiency = category
  LPF fl#gear#itm#properties#slot_range
    INT_VAR
      category
    RET
      lower_slot
      upper_slot
  END
  LPF fl#gear#itm#properties#check_abilities
    RET
      ranged_weapon = ranged
      launcher
  END
  LPF fl#gear#itm#properties#check_effects
    INT_VAR
      category
    RET
      mage_penalty
      thief_penalty
  END
END

/*
 * Check extended headers for sundry properties
 */
DEFINE_PATCH_FUNCTION fl#gear#itm#properties#check_abilities
  RET
    ranged
    launcher
BEGIN
  ranged = 0
  launcher = 0
  READ_LONG 0x64 ao
  FOR (i = 0; i < SHORT_AT 0x68; ++i) BEGIN
    READ_BYTE ao + 0x38 * i type
    ranged = type = 2 OR type = 4 ? 1 : ranged
    launcher = type = 4 ? 1 : launcher
  END
END

/*
 * Check effects for sundry properties
 */
DEFINE_PATCH_FUNCTION fl#gear#itm#properties#check_effects
  INT_VAR
    category = 0
  RET
    mage_penalty
    thief_penalty
BEGIN
  mage_penalty = 0
  thief_penalty = 0
  PATCH_IF category = 2 OR category = 12 BEGIN // armour or shied
    READ_LONG 0x6a eo
    FOR (i = 0; i < SHORT_AT 0x70; ++i) BEGIN
      READ_SHORT eo + 0x30 * i opcode
      READ_SLONG eo + 0x30 * i + 0x4 p1
      READ_SLONG eo + 0x30 * i + 0x8 p2
      mage_penalty = (opcode = 145 AND p2 = 0) OR // disable mage casting
                     (opcode = 60 AND p1 >= 40) // miscast magic percent
                     ? 1 : mage_penalty
      thief_penalty = (opcode = 144 AND p2 = 0) OR // disable stealth button
                      (opcode = 275 AND p1 <= "-50") OR // HiS penalty
                      (opcode = 59 AND p1 <= "-50") // stealth penalty
                      ? 1 : thief_penalty
    END
  END
END

/*
 * Returns the slot range of the specified category
 */
DEFINE_PATCH_FUNCTION fl#gear#itm#properties#slot_range
  INT_VAR
    category = 0
  RET
    lower_slot
    upper_slot
BEGIN
  lower_slot = category = 1 ? 6 : category = 2 ? 1 : category = 3 ? 7 :
               category = 4 ? 8 : category = 6 ? 3 : category = 7 ? 0 :
               category = 10 ? 4 : category = 12 ? 2 :
               category = 15 OR category = 27 OR category = 25 OR
               category = 17 OR category = 23 OR category = 22 OR
               category = 16 OR category = 30 OR category = 26 OR
               category = 19 OR category = 20 OR category = 21 OR
               category = 18 OR category = 29 ? 9 : category = 32 ? 17 :
               category = 35 ? 18 : 21
  upper_slot = category = 1 ? 7 : category = 2 ? 2 : category = 3 ? 8 :
               category = 4 ? 9 : category = 6 ? 4 : category = 7 ? 1 :
               category = 10 ? 6 : category = 12 ? 3 :
               category = 15 OR category = 27 OR category = 25 OR
               category = 17 OR category = 23 OR category = 22 OR
               category = 16 OR category = 30 OR category = 26 OR
               category = 19 OR category = 20 OR category = 21 OR
               category = 18 OR category = 29 ? 13 :
               category = 32 ? 18 : category = 35 ? 21 : 37
END

/*
 * Returns the item's unusability bytes as two DWORDs
 */
DEFINE_PATCH_FUNCTION fl#gear#itm#unuse
  RET
    main
    kit
BEGIN
  READ_LONG 0x1e main
  READ_BYTE 0x29 kit1
  READ_BYTE 0x2b kit2
  READ_BYTE 0x2d kit3
  READ_BYTE 0x2f kit4
  kit2 <<= 8
  kit3 <<= 16
  kit4 <<= 24
  kit = kit1 + kit2 + kit3 + kit4
END

/*
 * "Returns" arrays of opcodes #319 (EE)
 * $fl#gear#usable#itm#319#bool
 * $fl#gear#usable#itm#319#p1
 * $fl#gear#usable#itm#319#p2
 * $fl#gear#usable#itm#319#resource
 * all of the type $array(int) = result
 */
DEFINE_PATCH_MACRO fl#gear#usable#itm#319 BEGIN
  LOCAL_SET _ = 0
  LOCAL_SET off = 0
  LOCAL_SET opcode = 0
  LOCAL_SET p1 = 0
  LOCAL_SET p2 = 0
  LOCAL_SET count = 0
  LOCAL_SPRINT res ""

  CLEAR_ARRAY fl#gear#usable#itm#319#bool
  CLEAR_ARRAY fl#gear#usable#itm#319#p1
  CLEAR_ARRAY fl#gear#usable#itm#319#p2
  CLEAR_ARRAY fl#gear#usable#itm#319#resource

  GET_OFFSET_ARRAY fl#gear#usable#itm#offset_array#319 ITM_V10_GEN_EFFECTS
  PHP_EACH fl#gear#usable#itm#offset_array#319 AS _ => off BEGIN
    READ_SHORT off opcode
    PATCH_IF opcode = 319 BEGIN
      ++count
      READ_BYTE off + 0x3 bool
      READ_LONG off + 0x4 p1
      READ_LONG off + 0x8 p2
      SET $fl#gear#usable#itm#319#bool(count) = bool
      SET $fl#gear#usable#itm#319#p1(count) = p1
      SET $fl#gear#usable#itm#319#p2(count) = p2
      PATCH_IF p2 = 11 BEGIN
        READ_ASCII off + 0x14 res
        SPRINT $fl#gear#usable#itm#319#resource(count) "%res%"
      END
    END
  END
END

/*
 * Determines if the specified creature can use the item given by the current
 * buffer. The current buffer obviously needs to be a valid item.
 */
DEFINE_PATCH_FUNCTION fl#gear#usable#itm
  STR_VAR
    creature = ""
  RET
    usable
    available
BEGIN
  LPF fl#gear#itm#properties RET lower = lower_slot upper = upper_slot END
  LPF fl#gear#itm#unuse RET itm_main = main itm_kit = kit END
  LPM fl#gear#usable#itm#319 // (EE)

  INNER_ACTION BEGIN
    COPY_EXISTING "%creature%" override
      LPF fl#gear#cre#first_available_slot
        INT_VAR
          lower
          upper
        RET
          available
      END
      LPF fl#gear#cre#unuse RET cre_main = main cre_kit = kit END
      LPF fl#gear#usable#cre#319 RET usable END
    BUT_ONLY
  END
  usable = (itm_main BAND cre_main) = 0 AND
           (itm_kit BAND cre_kit) = 0 ? usable : 0
END

DEFINE_PATCH_FUNCTION fl#gear#cre#read_kit
  RET
    kit
BEGIN
  // The word order is reversed
  READ_SHORT 0x244 low_word
  READ_SHORT 0x246 high_word
  low_word <<= 16
  kit = low_word + high_word
END

/*
 * Checks the result of fl#gear#usable#itm#319 against the current buffer
 * Uses the following arrays from the calling scope
 * $fl#gear#usable#itm#319#bool
 * $fl#gear#usable#itm#319#p1
 * $fl#gear#usable#itm#319#p2
 * $fl#gear#usable#itm#319#resource
 */
DEFINE_PATCH_FUNCTION fl#gear#usable#cre#319
  RET
    usable
BEGIN
  PHP_EACH fl#gear#usable#itm#319#p1 AS count => p1 BEGIN
    SET bool = $fl#gear#usable#itm#319#bool(count)
    SET p2 = $fl#gear#usable#itm#319#p2(count)
    PATCH_MATCH p2 WITH
      2 // EA
      BEGIN SET $usable(count) = BYTE_AT 0x270 = p1 ? bool : NOT bool END

      3 // GENERAL
      BEGIN SET $usable(count) = BYTE_AT 0x271 = p1 ? bool : NOT bool END

      4 // RACE
      BEGIN SET $usable(count) = BYTE_AT 0x272 = p1 ? bool : NOT bool END

      5 // CLASS
      BEGIN SET $usable(count) = BYTE_AT 0x273 = p1 ? bool : NOT bool END

      6 // SPECIFIC
      BEGIN SET $usable(count) = BYTE_AT 0x274 = p1 ? bool : NOT bool END

      7 // GENDER
      BEGIN SET $usable(count) = BYTE_AT 0x275 = p1 ? bool : NOT bool END

      8 // ALIGN
      BEGIN SET $usable(count) = BYTE_AT 0x27b = p1 ? bool : NOT bool END

      9 // KIT
      BEGIN
        LPF fl#gear#cre#read_kit RET kit END
        SET $usable(count) = kit = p1 ? bool : NOT bool
      END

      10 // Name
      BEGIN SET $usable(count) = LONG_AT 0x008 = p1 ? bool : NOT bool END

      11 // Script name
      BEGIN
        SPRINT res $fl#gear#usable#itm#319#resource(count)
        READ_ASCII 0x280 script_name (32) NULL
        SET $usable(count) = "%res%" STR_EQ "%script_name%" ? bool : NOT bool
      END
      DEFAULT
    END
  END
  usable = 1
  PHP_EACH usable AS _ => bool BEGIN
    usable &= bool
  END
END

/*
 * Returns the first available item slot in the specified range
 */
DEFINE_PATCH_FUNCTION fl#gear#cre#first_available_slot
  INT_VAR
    lower = "-1"
    upper = "-1"
    available = "-1"
  RET
    available
BEGIN
  available = "-1"
  READ_LONG 0x2b8 iso
  FOR (i = lower; i < upper; ++i) BEGIN
    READ_SSHORT iso + 0x2 * i ref
    PATCH_IF ref < 0 BEGIN
      available = i
      i = upper
    END
  END
END

/*
 * Returns unusability bytes for the creature in the form of two DWORDs
 * Can be compared to the DWORDs read from items (1 means the creature is,
 * 0 means the creature ain't)
 */
DEFINE_PATCH_FUNCTION fl#gear#cre#unuse
  RET
    main
    kit
BEGIN
  READ_LONG 0x244 kitvalue
  READ_BYTE 0x272 race
  READ_BYTE 0x273 class
  READ_BYTE 0x27b alignment
  main1 = 0 main2 = 0 main3 = 0 main4 = 0
  kit1 = 0 kit2 = 0 kit3 = 0 kit4 = 0
  main1 = alignment = 17 ? 0b00010100 : // LAWFUL_GOOD
          alignment = 33 ? 0b00100100 : // NEUTRAL_GOOD
          alignment = 49 ? 0b00000101 : // CHAOTIC_GOOD
          alignment = 18 ? 0b00011000 : // LAWFUL_NEUTRAL
          alignment = 34 ? 0b00101000 : // NEUTRAL
          alignment = 50 ? 0b00001001 : // CHAOTIC_NEUTRAL
          alignment = 19 ? 0b00010010 : // LAWFUL_EVIL
          alignment = 35 ? 0b00100010 : // NEUTRAL_EVIL
          alignment = 51 ? 0b00000011 : // CHAOTIC_EVIL
          main1
  main1 = class = 5 ? main1 BOR 0b01000000 : // BARD
          class = 3 ? main1 BOR 0b10000000 : // CLERIC
          main1
  main2 = class = 17 ? 0b10000000 : // FIGHTER_MAGE_CLERIC
          class = 8  ? 0b01000000 : // FIGHTER_CLERIC
          class = 7  ? 0b00100000 : // FIGHTER_MAGE
          class = 16 ? 0b00010000 : // FIGHTER_DRUID
          class = 2  ? 0b00001000 : // FIGHTER
          class = 18 ? 0b00000100 : // CLERIC_RANGER
          class = 15 ? 0b00000010 : // CLERIC_THIEF
          class = 14 ? 0b00000001 : // CLERIC_MAGE
          main2
  main3 = class = 10 ? 0b00000001 : // FIGTHER_MAGE_THIEF
          class = 9  ? 0b00000010 : // FIGHTER_THIEF
          class = 1  ? 0b00000100 : // MAGE
          class = 13 ? 0b00001000 : // MAGE_THIEF
          class = 6  ? 0b00010000 : // PALADIN
          class = 12 ? 0b00100000 : // RANGER
          class = 4  ? 0b01000000 : // THIEF
          main3
  main3 = race = 2 ? main3 BOR 0b10000000 : // ELF
          main3
  main4 = race = 4 ? 0b00000001 : // DWARF
          race = 3 ? 0b00000010 : // HALF_ELF
          race = 5 ? 0b00000100 : // HALFLING
          race = 1 ? 0b00001000 : // HUMAN
          race = 6 ? 0b00010000 : // GNOME
          race = 7 ? 0b10000000 : // HALFORC
          main4
  main4 = class = 20 ? main4 BOR 0b00100000 : // MONK
          class = 11 ? main4 BOR 0b01000000 : // DRUID
          main4
  kit1 = kitvalue = 0x40130000 ? 0b00000001 : // TALOS
         kitvalue = 0x40140000 ? 0b00000010 : // HELM
         kitvalue = 0x40150000 ? 0b00000100 : // LATHANDER
         kitvalue = 0x40100000 ? 0b00001000 : // TOTEMIC
         kitvalue = 0x40110000 ? 0b00010000 : // SHAPESHIFTER
         kitvalue = 0x40120000 ? 0b00100000 : // AVENGER
         kitvalue = 0x00004000 ? 0b01000000 : // BARBARIAN
         kitvalue = 0x00008000 ? 0b10000000 : // WILDMAGE
         kit1
  kit2 = kitvalue = 0x40080000 ? 0b00000001 : // STALKER
         kitvalue = 0x40090000 ? 0b00000010 : // BEASTMASTER
         kitvalue = 0x400a0000 ? 0b00000100 : // ASSASSIN
         kitvalue = 0x400b0000 ? 0b00001000 : // BOUNTYHUNTER
         kitvalue = 0x400c0000 ? 0b00010000 : // SWASHBUCKLER
         kitvalue = 0x400d0000 ? 0b00100000 : // BLADE
         kitvalue = 0x400e0000 ? 0b01000000 : // JESTER
         kitvalue = 0x400f0000 ? 0b10000000 : // SKALD
         kit2
  kit3 = kitvalue = 0x01000000 ? 0b00000001 : // DIVINER
         kitvalue = 0x02000000 ? 0b00000010 : // ENCHANTER
         kitvalue = 0x04000000 ? 0b00000100 : // ILLUSIONIST
         kitvalue = 0x08000000 ? 0b00001000 : // INVOKER
         kitvalue = 0x10000000 ? 0b00010000 : // NECROMANCER
         kitvalue = 0x20000000 ? 0b00100000 : // TRANSMUTER
         kitvalue = 0x40070000 ? 0b10000000 : // ARCHER
         kit3
         /* No kit or trueclass/generalist */
  kit3 = kitvalue = 0 OR kitvalue = 0x40000000 ? kit3 BOR 0b01000000 :
         kit3
  kit4 = kitvalue = 0x40010000 ? 0b00000001 : // BERSERKER
         kitvalue = 0x40020000 ? 0b00000010 : // KENSAI
         kitvalue = 0x40030000 ? 0b00000100 : // WIZARDSLAYER
         kitvalue = 0x40040000 ? 0b00001000 : // CAVALIER
         kitvalue = 0x40050000 ? 0b00010000 : // INQUISITOR
         kitvalue = 0x40060000 ? 0b00100000 : // UNDEADHUNTER
         kitvalue = 0x00400000 ? 0b01000000 : // ABJURER
         kitvalue = 0x00800000 ? 0b10000000 : // CONJURER
         kit4
  main2 <<= 8
  main3 <<= 16
  main4 <<= 24
  kit2 <<= 8
  kit3 <<= 16
  kit4 <<= 24
  main = main1 + main2 + main3 + main4
  kit = kit1 + kit2 + kit3 + kit4
END

/*
 * Checks if the specified item is affected by item-exclusion
 */
DEFINE_PATCH_FUNCTION fl#gear#usable#cre#item_exclusion
  STR_VAR
    item = ""
  RET
    exclusion
BEGIN
  exclusion = 0
  TO_LOWER item
  PATCH_IF !fl#gear#setup#array#itemexcl BEGIN
    INNER_ACTION BEGIN
      LAM fl#gear#setup#array#itemexcl
    END
  END
  PATCH_IF VARIABLE_IS_SET $fl#gear#itemexcl("%item%") BEGIN
    READ_LONG 0x2b8 iso
    READ_LONG 0x2bc io
    FOR (i = 0; i < 18; ++i) BEGIN
      READ_SSHORT iso + 0x2 * i ref
      PATCH_IF ref >= 0 BEGIN
        READ_ASCII io + ref * 0x14 ei
        TO_LOWER ei
        PATCH_IF FILE_EXISTS_IN_GAME "%ei%.itm" AND
                 VARIABLE_IS_SET $fl#gear#itemexcl("%ei%")
        BEGIN
          exclusion = 1
          i = 37
        END
      END
    END
  END
END

/*
 * Determines if the specified item can be used by the creature given by the
 * current buffer. The current buffer obviously needs to be a valid creature.
 */
DEFINE_PATCH_FUNCTION fl#gear#usable#cre
  STR_VAR
    item = ""
  RET
    usable
    available
BEGIN
  INNER_ACTION BEGIN
    COPY_EXISTING "%item%" override
      LPF fl#gear#itm#properties RET lower = lower_slot upper = upper_slot END
      LPF fl#gear#itm#unuse RET itm_main = main itm_kit = kit END
      LPM fl#gear#usable#itm#319 // (EE)
    BUT_ONLY
  END

  LPF fl#gear#cre#first_available_slot
    INT_VAR
      lower
      upper
    RET
      available
  END
  LPF fl#gear#cre#unuse RET cre_main = main cre_kit = kit END
  LPF fl#gear#usable#cre#319 RET usable END
  usable = (itm_main BAND cre_main) = 0 AND
           (itm_kit BAND cre_kit) = 0 ? usable : 0
END

/*
 * Attempts to equip the specified creature with the specified item in an
 * optimised fashion, considering skill, class and kit, available item slots,
 * existing equipment and other factors. Boolean force equips the item
 * regardless.
 */
DEFINE_ACTION_FUNCTION fl#gear#equip
  INT_VAR
    force = 0
    charge1 = 0
    charge2 = 0
    charge3 = 0
    flags = 0
  STR_VAR
    item = ""
    creature = ""
BEGIN
  LAF fl#gear#require#cre STR_VAR creature RET creature = file END
  COPY_EXISTING "%creature%" "override"
    LPF fl#gear#equip
      INT_VAR
        force
        charge1
        charge2
        charge3
        flags
      STR_VAR
        item
    END
  BUT_ONLY
END

/*
 * As the action function, except the current buffer must be a valid creature.
 */
DEFINE_PATCH_FUNCTION fl#gear#equip
  INT_VAR
    force = 0
    charge1 = 0
    charge2 = 0
    charge3 = 0
    flags = 0
  STR_VAR
    item = ""
BEGIN
  LPF fl#gear#signature RET signature END
  PATCH_MATCH "%signature%" WITH
    "CRE " WHEN "%item%" STRING_EQUAL_CASE ""
    BEGIN
      PATCH_FAIL "ERROR: the patch function fl#gear#equip must receive an item argument"
    END

    "CRE "
    BEGIN
      LPF fl#gear#require#itm STR_VAR item END
      LPF fl#gear#equip#cre
        INT_VAR
          force
          charge1
          charge2
          charge3
          flags
        STR_VAR
          item
      END
    END

    DEFAULT
      PATCH_FAIL "ERROR: the patch function fl#gear#equip was called on an invalid type of buffer: %SOURCE_FILE%"
  END
END

/*
 * General logic for equipping items in an optimised fashion
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#cre
  INT_VAR
    force = 0
    charge1 = 0
    charge2 = 0
    charge3 = 0
    flags = 0
  STR_VAR
    item = ""
BEGIN
  /* Get properties of existing items */
  LPM fl#gear#equip#cre#check_items
  /* Add new item */
  LPF fl#gear#equip#cre#add_item
    INT_VAR
      charge1
      charge2
      charge3
      flags
    STR_VAR
      item
    RET
      item_index = index
  END
  /* Get properties of new item */
  INNER_ACTION BEGIN
    LAF fl#gear#itm#properties
      STR_VAR
        item
      RET
        lower_slot
        upper_slot
        category
        item_flags = flags
        item_proficiency = proficiency
        ranged_weapon
        launcher
        mage_penalty
        thief_penalty
    END
  END
  /* Check for more or less hard conflicts */
  LPF fl#gear#equip#conflicts
    INT_VAR
      category
      item_flags
      ranged_weapon
      launcher
      proficiency = item_proficiency
      mage_penalty
      thief_penalty
    STR_VAR
      item
    RET
      conflict
  END

  /* Never equip items with conflicts */
  PATCH_IF !conflict BEGIN
    PATCH_IF force BEGIN // disregard usability rules
      LPF fl#gear#equip#forced
        INT_VAR
          item_index
          lower_slot
          upper_slot
      END
    END ELSE BEGIN // play by the usual rules
      LPF fl#gear#equip#unforced
        INT_VAR
          item_index
        STR_VAR
          item
      END
    END
  END ELSE BEGIN
    LPF fl#gear#equip#gen_inv INT_VAR item_index END
  END
END

/* Equip an item while considering usability rules,
 * item exclusion and optimisation
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#unforced
  INT_VAR
    item_index = "-1"
  STR_VAR
    item = ""
BEGIN
  LPF fl#gear#usable STR_VAR item RET usable available END
  LPF fl#gear#usable#cre#item_exclusion STR_VAR item RET exclusion END
  PATCH_IF usable AND !exclusion AND available >= 0 BEGIN // slot available
    LPF fl#gear#equip#cre#write_index
      INT_VAR
        slot = available
        index = item_index
    END
  END ELSE PATCH_IF usable AND !exclusion AND available < 0 BEGIN // swap
    // TBD
  END ELSE PATCH_IF !usable OR exclusion BEGIN // put in general inventory
    LPF fl#gear#equip#gen_inv INT_VAR item_index END
  END
END

/*
 * Equip an item without considering usability rules
 * or optimisation
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#forced
  INT_VAR
    item_index = "-1"
    lower_slot = "-1"
    upper_slot = "-1"
BEGIN
  LPF fl#gear#cre#first_available_slot
    INT_VAR
      lower = lower_slot
      upper = upper_slot
    RET
      available
  END
  PATCH_IF available >= 0 BEGIN // slot is available
    LPF fl#gear#equip#cre#write_index
      INT_VAR
        slot = available
        index = item_index
    END
  END ELSE BEGIN // no slot available: force swap
    // TBD
  END
END

/*
 * Write the given item index to the general inventory
 * Nothing is written if the inventory is full
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#gen_inv
  INT_VAR
    item_index = "-1"
BEGIN
  LPF fl#gear#cre#first_available_slot
    INT_VAR
      lower = 21
      upper = 37
    RET
      available
  END
  PATCH_IF available >= 0 BEGIN
    LPF fl#gear#equip#cre#write_index
      INT_VAR
        slot = available
        index = item_index
    END
  END // no slot available in inventory: no reference to item
END

/*
 * Creates arrays of properties of items already in the inventory
 * "Returns" the arrays
 * fl#gear#equip#array#slot_ref
 * fl#gear#equip#array#category
 * fl#gear#equip#array#flags
 * fl#gear#equip#array#ranged
 * fl#gear#equip#array#launcher
 * fl#gear#equip#array#proficiency
 * the key is the slot index
 */
DEFINE_PATCH_MACRO fl#gear#equip#cre#check_items BEGIN
  LOCAL_SET io = 0
  LOCAL_SET iso = 0
  LOCAL_SET i = 0
  LOCAL_SET ref = 0
  LOCAL_SET category = 0
  LOCAL_SET flags = 0
  LOCAL_SPRINT item ""

  READ_LONG 0x2b8 iso
  READ_LONG 0x2bc io
  FOR (i = 0; i < 18; ++i) BEGIN
    READ_SSHORT iso + 0x2 * i ref
    SET $fl#gear#equip#array#slot_ref("%i%") = ref
    PATCH_IF ref >= 0 BEGIN
      READ_ASCII io + 0x14 * ref item
      PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
        INNER_ACTION BEGIN
          LAF fl#gear#itm#properties
            STR_VAR
              item
            RET
              category
              flags
              ranged_weapon
              launcher
              proficiency
          END
        END
        SET $fl#gear#equip#array#category("%i%") = category
        SET $fl#gear#equip#array#flags("%i%") = flags
        SET $fl#gear#equip#array#ranged("%i%") = ranged_weapon
        SET $fl#gear#equip#array#launcher("%i%") = launcher
        SET $fl#gear#equip#array#proficiency("%i%") = proficiency
      END
    END
  END
END

/*
 * General check for conflicts
 * Uses the arrays set by
 * fl#gear#equip#cre#check_items
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflicts
  INT_VAR
    category = 0
    item_flags = 0
    ranged_weapon = 0
    launcher = 0
    proficiency = 0
    mage_penalty = 0
    thief_penalty = 0
  STR_VAR
    item = ""
  RET
    conflict
    twohanded_conflict
    launcher_conflict
    ranged_conflict
    mage_conflict
    thief_conflict
    curse_conflict
BEGIN
  LPF fl#gear#equip#conflict#twohanded
    INT_VAR
      category
      item_flags
    RET
      twohanded_conflict = conflict
  END
  LPF fl#gear#equip#conflict#launcher
    INT_VAR
      launcher
      proficiency
    RET
      launcher_conflict = conflict
  END
  LPF fl#gear#equip#conflict#ranged_weapons
    INT_VAR
      ranged_weapon
      launcher
      proficiency
    RET
      ranged_conflict = conflict
  END
  LPF fl#gear#equip#conflict#mage
    INT_VAR
      mage_penalty
    RET
      mage_conflict = conflict
  END
  LPF fl#gear#equip#conflict#thief
    INT_VAR
      thief_penalty
    RET
      thief_conflict = conflict
  END
  LPF fl#gear#equip#conflict#curse
    INT_VAR
      item_flags
    STR_VAR
      item
    RET
      curse_conflict = conflict
  END
  conflict = twohanded_conflict OR
             launcher_conflict OR
             ranged_conflict OR
             mage_conflict OR
             thief_conflict OR
             curse_conflict
END

/*
 * Checks for launcher conflicts
 * Cannot equip two launchers of the same type
 * Uses the following arrays from the calling scope
 * fl#gear#equip#array#launcher
 * fl#gear#equip#array#proficiency
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#launcher
  INT_VAR
    launcher = 0
    proficiency = 0
  RET
    conflict
BEGIN
  conflict = 0
  PATCH_IF launcher BEGIN
    FOR (i = 9; i < 13; ++i) BEGIN
      conflict = VARIABLE_IS_SET $fl#gear#equip#array#launcher("%i%") AND
                 $fl#gear#equip#array#launcher("%i%") = 1 AND
                 VARIABLE_IS_SET $fl#gear#equip#array#proficiency("%i%") AND
                 $fl#gear#equip#array#proficiency("%i%") = proficiency
                 ? 1 : conflict
    END
  END
END

/*
 * Checks for ranged-weapon (and sling) conflicts
 * Can only equip ranged weapons and slings unless there is no off-hand item
 * or the off-hand item is a shield
 * Uses the following arrays from the calling scope
 * fl#gear#equip#array#slot_ref
 * fl#gear#equip#array#category
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#ranged_weapons
  INT_VAR
    ranged_weapon = 0
    launcher = 0
    proficiency = 0
  RET
    conflict
BEGIN
  conflict = 0
  sling_prof = !ENGINE_IS ~bg1 totsc~ ? 107 : 18
  PATCH_IF ranged_weapon OR (launcher AND proficiency = sling_prof) BEGIN
    conflict = $fl#gear#equip#array#slot_ref(2) < 0 OR
               (VARIABLE_IS_SET $fl#gear#equip#array#category(2) AND
                $fl#gear#equip#array#category(2) = 12)
               ? conflict : 1
  END
END

/*
 * Checks for conflicts involving two-handed weapons
 * Cannot equip two-handed weapons and off-hand items simultaneously
 * Uses the following arrays from the calling scope
 * fl#gear#equip#array#slot_ref
 * fl#gear#equip#array#flags
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#twohanded
  INT_VAR
    category = 0
    item_flags = 0
  RET
    conflict
BEGIN
  conflict = 0
  /* Conflict if the item is two-handed or bow and there's something
   * in the shield slot
   */
  conflict = ((item_flags BAND BIT1) = BIT1 OR
              (item_flags BAND BIT7) = BIT7) AND
             $fl#gear#equip#array#slot_ref(2) >= 0
             ? 1 : conflict
  /* Conflict if the item is a shield and there's a two-handed
   * weapon or bow equipped
   */
  PATCH_IF category = 12 BEGIN
    FOR (i = 9; i < 13; ++i) BEGIN
      conflict = VARIABLE_IS_SET $fl#gear#equip#array#flags("%i%") AND
                 (($fl#gear#equip#array#flags("%i%") BAND BIT1) = BIT1 OR
                 ($fl#gear#equip#array#flags("%i%") BAND BIT7) = BIT7)
                 ? 1 : conflict
    END
  END
END

/*
 * Checks for class conflict: mage
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#mage
  INT_VAR
    mage_penalty = 0
  RET
    conflict
BEGIN
  READ_BYTE 0x273 class
  conflict = mage_penalty AND
             (class = 1 OR // MAGE
              class = 5 OR // BARD
              class = 7 OR // FIGHTER_MAGE
              class = 10 OR // FIGHTER_MAGE_THIEF
              class = 13 OR // MAGE_THIEF
              class = 14 OR // CLERIC_MAGE
              class = 17 OR // FIGHTER_MAGE_CLERIC
              class = 19) // SORCERER
              ? 1 : 0
END

/*
 * Checks for class conflict: thief
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#thief
  INT_VAR
    thief_penalty = 0
  RET
    conflict
BEGIN
  READ_BYTE 0x273 class
  conflict = thief_penalty AND
             (class = 4 OR // THIEF
              class = 5 OR // BARD
              class = 9 OR // FIGHTER_THIEF
              class = 10 OR // FIGHTER_MAGE_THIEF
              class = 13 OR // MAGE_THIEF
              class = 15) // CLERIC_THIEF
              ? 1 : 0
END

/*
 * Checks for cursed items; do not equip
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#conflict#curse
  INT_VAR
    item_flags = 0
  STR_VAR
    item = ""
  RET
    conflict
BEGIN
  TO_LOWER item
  conflict = (item_flags BAND BIT4) = BIT4 OR
             VARIABLE_IS_SET $fl#gear#cursed("%item%")
             ? 1 : 0
END

/*
 * Writes a resource reference to the item into the creature's
 * item list and returns the reference's index
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#cre#add_item
  INT_VAR
    charge1 = 0
    charge2 = 0
    charge3 = 0
    flags = 0
  STR_VAR
    item = ""
  RET
    index
BEGIN
  LPF RES_OF_FILESPEC
    STR_VAR
      filespec = EVAL "%item%"
    RET
      item = res
  END
  READ_LONG 0x2bc io
  READ_LONG 0x2c0 ni
  io = io < 0x2d4 ? 0x2d4 : io
  INSERT_BYTES io + 0x14 * ni 0x14
  WRITE_ASCIIE io + 0x14 * ni "%item%" #8
  WRITE_SHORT  io + 0x14 * ni + 0xa charge1
  WRITE_SHORT  io + 0x14 * ni + 0xc charge2
  WRITE_SHORT  io + 0x14 * ni + 0xe charge3
  WRITE_BYTE   io + 0x14 * ni + 0x10 flags
  WRITE_LONG 0x2c0 ni + 1
  PATCH_FOR_EACH off IN 0x2a8 0x2b0 0x2b8 0x2c4 BEGIN
    READ_LONG off ov
    PATCH_IF (ov > io) OR (ov = io AND ni = 0) BEGIN
      WRITE_LONG off ov + 0x14
    END
  END
  index = ni
END

/*
 * Writes the specified item index to the specified item slot
 */
DEFINE_PATCH_FUNCTION fl#gear#equip#cre#write_index
  INT_VAR
    slot = "-1"
    index = "-1"
BEGIN
  PATCH_IF slot = "-1" OR index = "-1" BEGIN
    PATCH_FAIL "ERROR: the function fl#gear#equip#cre#write_index got invalid arguments"
  END
  READ_LONG 0x2b8 iso
  WRITE_SHORT iso + 0x2 * slot index
END

DEFINE_PATCH_FUNCTION give_itm_to_cre INT_VAR f_Equip = 1 f_Flags = 0 BEGIN //requires %itm_to_give%, %Charge[1-3]%, $itemexcl, $itm_rank, $cursed_item_list
  SPRINT Source_Cre "%SOURCE_RES%"
  TO_LOWER Source_Cre
  READ_LONG 0x2b8 itm_slt ELSE 0
  READ_LONG 0x2bc itm_off ELSE 0
  READ_LONG 0x2c0 num_itm ELSE 0
  INSERT_BYTES itm_off + 0x14*num_itm       0x14
  WRITE_ASCIIE itm_off + 0x14*num_itm       "%itm_to_give%" #8
  WRITE_SHORT  itm_off + 0x14*num_itm + 0xa Charge1
  WRITE_SHORT  itm_off + 0x14*num_itm + 0xc Charge2
  WRITE_SHORT  itm_off + 0x14*num_itm + 0xe Charge3
  adjust = 0x14
  itm_slt = itm_slt >= itm_off ? itm_slt + 0x14 : itm_slt
  added = 0
  PATCH_IF f_Equip BEGIN
    ranged = 0
    launcher = 0
    no_thief = 0
    no_mage = 0
    INNER_ACTION BEGIN
      COPY_EXISTING "%itm_to_give%.itm" override
        LAUNCH_PATCH_MACRO read_itm_unusabilities
        READ_SHORT 0x1c new_cat ELSE 0
        LPF read_item_prof RET new_prof = f_Prof END
        PATCH_IF new_cat = 2 OR new_cat = 12 BEGIN //Armor or shields
          READ_LONG 0x6a fx_off
          FOR (i=0;i<SHORT_AT 0x70;++i) BEGIN
            READ_SHORT fx_off + 0x30*i       opcode
            READ_SLONG fx_off + 0x30*i + 0x4 param1
            READ_LONG  fx_off + 0x30*i + 0x8 param2
            no_thief = (opcode = 144 AND param2 = 0) OR (opcode = 275 AND param1 <= "-50") OR (opcode = 59 AND param1 <= "-50") ? 1 : no_thief
            no_mage = (opcode = 145 AND param2 = 0) OR (opcode = 60 AND param1 >= 40) ? 1 : no_mage
          END
        END
        READ_LONG  0x64 ab_off ELSE 0x72
        READ_SHORT 0x68 num_ab ELSE 0
        FOR (i=0;i<num_ab;i+=1) BEGIN
          READ_BYTE ab_off + 0x38*i ab_type ELSE 0
          ranged = ab_type = 2 OR ab_type = 4 ? 1 : ranged
          launcher = ab_type = 4 ? 1 : launcher
        END
      BUT_ONLY
    END
    add_itm = (riu_itm_flags1 BAND 16) = 0 AND !VARIABLE_IS_SET $fl#gear#cursed("%itm_to_give%") ? 1 : 0 //Not cursed
    two_handed = (riu_itm_flags1 BAND 130) = 0 ? 0 : 1 //Two-handed or bow
    FOR (i=0;i<37;i+=1) BEGIN
      READ_SSHORT itm_slt + 0x2*i ref ELSE "-2"
      SET $ref("%i%") = ref
      PATCH_IF ref >= 0 BEGIN
        READ_ASCII itm_off + 0x14*ref item ELSE flblank
        TO_LOWER item
        SPRINT $items("%i%") "%item%"
      END ELSE BEGIN
        SPRINT $items("%i%") flblank
      END
    END
    PATCH_IF $ref(2) >= 0 AND (two_handed = 1 OR ranged = 1) BEGIN //Something in the shield slot
      add_itm = two_handed = 1 ? 0 : add_itm //do not equip two-handed items
      SPRINT item $items(2)
      PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" AND add_itm = 1 BEGIN
        INNER_ACTION BEGIN
          COPY_EXISTING "%item%.itm" override
            READ_BYTE 0x1c item_cat ELSE 0
            add_itm = item_cat = 12 AND ranged = 1 ? add_itm : 0 //do not equip hurled weapons unless it's a shield
          BUT_ONLY
        END
      END
    END
    PATCH_IF riu_category = 12 BEGIN //if new item is a shield, do not equip if there are two-handed weapons
      FOR (i=9;i<13;i+=1) BEGIN
        SPRINT item $items("%i%")
        PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
          INNER_ACTION BEGIN
            COPY_EXISTING "%item%.itm" override
              READ_BYTE 0x18 flags5 ELSE 0
            BUT_ONLY
          END
          add_itm = (flags5 BAND 130) = 0 ? add_itm : 0
        END
      END
    END
    //Determine which slots the item should be equipped in based on the category of the item.
    LAUNCH_PATCH_MACRO define_itm_slot_range
    LAUNCH_PATCH_MACRO define_cre_unusabilities
    LAUNCH_PATCH_MACRO read_cre_profs
    PATCH_IF VARIABLE_IS_SET $race_restriction("%itm_to_give%") BEGIN
      add_itm = dcu_race = $race_restriction("%itm_to_give%") ? add_itm : 0
    END
    add_itm = no_thief AND (dcu_class = 4 OR dcu_class = 9 OR dcu_class = 10 OR dcu_class = 13 OR dcu_class = 15) ? 0 : add_itm //do not equip armor that disables thief skills on thieves
    add_itm = no_mage AND (dcu_class = 1 OR dcu_class = 5 OR dcu_class = 7 OR dcu_class = 10 OR dcu_class = 13 OR dcu_class = 14 OR dcu_class = 17 OR dcu_class = 19) ? 0 : add_itm //do not equip armour that disables spellcasting on mages
    add_itm = (dcu_race = 124 OR dcu_race = 125) AND lower_bound = 9 ? 0 : add_itm //Do not equip weapons on vampires or mind flayers
    //Only proceed if the cre is not disallowed from using the item and if there is no other reason for not equipping it
    PATCH_IF (riu_itm_unuse1 BAND dcu_cre_unuse1) = 0 AND (riu_itm_unuse2 BAND dcu_cre_unuse2) = 0 AND (riu_itm_unuse3 BAND dcu_cre_unuse3) = 0 AND (riu_itm_unuse4 BAND dcu_cre_unuse4) = 0 AND (riu_itm_kit_unuse1 BAND dcu_cre_kit_unuse1) = 0 AND (riu_itm_kit_unuse2 BAND dcu_cre_kit_unuse2) = 0 AND (riu_itm_kit_unuse3 BAND dcu_cre_kit_unuse3) = 0 AND (riu_itm_kit_unuse4 BAND dcu_cre_kit_unuse4) = 0 AND add_itm = 1 BEGIN
      no_add = 0
      FOR (i=lower_bound;i<upper_bound;i+=1) BEGIN
        PATCH_IF $ref("%i%") = "-1" BEGIN
          PATCH_IF VARIABLE_IS_SET $fl#gear#itemexcl("%itm_to_give%") BEGIN
            FOR (j=0;j<21;j+=1) BEGIN
              no_add = VARIABLE_IS_SET $fl#gear#itemexcl($items("%j%")) ? 1 : no_add
            END
          END
          PATCH_IF launcher = 1 BEGIN //Do not equip two launchers of the same type
            FOR (j=9;j<13;j+=1) BEGIN
              SPRINT item $items("%j%")
              PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
                INNER_ACTION BEGIN
                  COPY_EXISTING "%item%.itm" override
                    READ_LONG  0x64 ab_off ELSE 0x72
                    READ_SHORT 0x68 num_ab ELSE 0
                    FOR (k=0;k<num_ab;k+=1) BEGIN
                      READ_BYTE ab_off + 0x38*k ab_type ELSE 0
                      PATCH_IF ab_type = 4 BEGIN
                        LPF read_item_prof INT_VAR f_BG1_default = 15 f_BG2_default = 104 RET launcher_prof = f_Prof END
                        no_add = launcher_prof = new_prof ? 1 : no_add
                      END
                    END
                  BUT_ONLY
                END
              END
            END
          END
          PATCH_IF no_add = 0 BEGIN
            WRITE_SHORT itm_slt + 0x2*i num_itm
            added = 1
            i = upper_bound
            f_Flags = lower_bound > 20 ? f_Flags : f_Flags | 2
            FOR (j=lower_bound;j<upper_bound;++j) BEGIN //remove replacement items
              PATCH_IF $ref("%j%") >= 0 AND VARIABLE_IS_SET $EVAL "%Source_Cre%_replace"($items("%j%")) BEGIN
                SPRINT item $items("%j%")
                no_delete = 0
                PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
                  INNER_ACTION BEGIN
                    COPY_EXISTING "%item%.itm" override
                      READ_BYTE  0x18 dflags ELSE 4
                      READ_SHORT 0x1c old_cat ELSE 0
                      LPF read_item_prof RET old_prof = f_Prof END
                    BUT_ONLY
                  END
                  ranged_new = new_prof = 104 OR new_prof = 105 OR new_prof = 15 OR (new_prof = 89 AND BG1_STYLE_PROFS = 1) ? 1 : new_prof = 103 OR new_prof = 27 OR (new_prof = 95 AND new_cat = 27 AND BG1_STYLE_PROFS = 1) ? 2 : new_prof = 107 OR new_prof = 18 OR (new_prof = 95 AND new_cat = 18 AND BG1_STYLE_PROFS = 1) ? 3 : 0 //i=bow, 2=xbow, 3=sling, 0=other
                  ranged_old = old_prof = 104 OR old_prof = 105 OR old_prof = 15 OR (old_prof = 89 AND BG1_STYLE_PROFS = 1) ? 1 : old_prof = 103 OR old_prof = 27 OR (old_prof = 95 AND old_cat = 27 AND BG1_STYLE_PROFS = 1) ? 2 : old_prof = 107 OR old_prof = 18 OR (old_prof = 95 AND old_cat = 18 AND BG1_STYLE_PROFS = 1) ? 3 : 0
                  no_delete = ranged_new = ranged_old AND (dflags BAND 4) = 4 ? no_delete : 1
                END
                PATCH_IF no_delete = 0 BEGIN
                  DELETE_BYTES itm_off + 0x14*$ref("%j%") 0x14
                  --num_itm
                  itm_slt = itm_slt > itm_off ? itm_slt - 0x14 : itm_slt
                  adjust -= 0x14
                  SPRINT $items("%j%") flblank
                  FOR (k=0;k<37;++k) BEGIN
                    READ_SSHORT itm_slt + 0x2*k refk
                    ref = $ref("%j%")
                    PATCH_IF refk > $ref("%j%") BEGIN
                      WRITE_SHORT itm_slt + 0x2*k refk - 1
                    END
                    SET $ref("%k%") = $ref("%k%") > $ref("%j%") ? $ref("%k%") - 1 : $ref("%k%")
                  END
                  SET $ref("%j%") = "-1"
                  WRITE_SHORT itm_slt + 0x2*j "-1"
                  //fix the selected weapon index if it was pointing at the removed weapon
                  PATCH_IF lower_bound = 9 BEGIN
                    READ_SHORT itm_slt + 0x2*38 selected
                    PATCH_IF lower_bound + selected = j BEGIN
                      FOR (q = lower_bound; q < upper_bound; ++q) BEGIN
                        READ_SSHORT itm_slt + 0x2*q ref
                        PATCH_IF ref >= 0 BEGIN
                          WRITE_SHORT itm_slt + 0x2*38 q - lower_bound
                          q = upper_bound
                        END
                      END
                    END
                  END
                END
              END
            END
          END
        END
      END
      PATCH_IF added = 0 AND lower_bound < 21 BEGIN //If we couldn't just add the item, try to swap it in
        FOR (i=lower_bound;i<upper_bound;i+=1) BEGIN
          no_swap = 0
          PATCH_IF VARIABLE_IS_SET $fl#gear#itemexcl("%itm_to_give%") BEGIN //Do not swap in a itemexcl item if there is another itemexcl item equipped, unless we are swapping out the other item
            FOR (j=0;j<21;j+=1) BEGIN
              no_swap = VARIABLE_IS_SET $fl#gear#itemexcl($item("%j%")) AND j != i ? 1 : no_swap
            END
          END
          SPRINT item $items("%i%")
          PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
            READ_BYTE itm_off + 0x14*$ref("%i%") + 0x10 cre_itm_flags1 ELSE 8
            INNER_ACTION BEGIN
              COPY_EXISTING "%item%.itm" override
                READ_BYTE 0x18 flags5 ELSE 16
                READ_SHORT 0x1c old_cat ELSE 0
                LPF read_item_prof RET old_prof = f_Prof END
              BUT_ONLY
            END
            ranged_new = new_prof = 104 OR new_prof = 105 OR new_prof = 15 OR (new_prof = 89 AND BG1_STYLE_PROFS = 1) ? 1 : new_prof = 103 OR new_prof = 27 OR (new_prof = 95 AND new_cat = 27 AND BG1_STYLE_PROFS = 1) ? 2 : new_prof = 107 OR new_prof = 18 OR (new_prof = 95 AND new_cat = 18 AND BG1_STYLE_PROFS = 1) ? 3 : 0 //i=bow, 2=xbow, 3=sling, 0=other
            ranged_old = old_prof = 104 OR old_prof = 105 OR old_prof = 15 OR (old_prof = 89 AND BG1_STYLE_PROFS = 1) ? 1 : old_prof = 103 OR old_prof = 27 OR (old_prof = 95 AND old_cat = 27 AND BG1_STYLE_PROFS = 1) ? 2 : old_prof = 107 OR old_prof = 18 OR (old_prof = 95 AND old_cat = 18 AND BG1_STYLE_PROFS = 1) ? 3 : 0
            no_swap = ranged_new = ranged_old ? no_swap : 1
            no_swap = (flags5 BAND 64) = 64 AND !VARIABLE_IS_SET $fl#gear#itemrank("%item%") ? 1 : no_swap //Do not swap out unranked magical items
            PATCH_IF VARIABLE_IS_SET $fl#gear#itemrank("%itm_to_give%") AND VARIABLE_IS_SET $fl#gear#itemrank("%item%") BEGIN //Do not swap out better items
              no_swap = $fl#gear#itemrank("%itm_to_give%") < $fl#gear#itemrank("%item%") AND lower_bound != 9 ? 1 : no_swap
              PATCH_IF lower_bound = 9 BEGIN
                no_swap = ($fl#gear#itemrank("%itm_to_give%") + (3/2)*$rcp_prof("%new_prof%")) <= ($fl#gear#itemrank("%item%") + (3/2)*$rcp_prof("%old_prof%")) ? 1 : no_swap
              END
            END
            PATCH_IF (flags5 BAND 4) = 4 AND (cre_itm_flags1 BAND 10) = 0 AND no_swap = 0 BEGIN //If the item is not undroppable and hasn't been disallowed for swapping
              PATCH_IF VARIABLE_IS_SET $EVAL "%Source_Cre%_replace"("%item%") BEGIN
                DELETE_BYTES itm_off + 0x14*$ref("%i%") 0x14
                itm_slt = itm_slt > itm_off ? itm_slt - 0x14 : itm_slt
                adjust -= 0x14
                --num_itm
                SPRINT $items("%i%") flblank
                FOR (k=0;k<37;++k) BEGIN
                  READ_SSHORT itm_slt + 0x2*k refk
                  PATCH_IF refk > $ref("%i%") BEGIN
                    WRITE_SHORT itm_slt + 0x2*k refk - 1
                  END
                  SET $ref("%k%") = $ref("%k%") > $ref("%i%") ? $ref("%k%") - 1 : $ref("%k%")
                END
                SET $ref("%i%") = "-1"
                WRITE_SHORT itm_slt + 0x2*i "-1"
              END ELSE BEGIN
                FOR (j=21;j<37;j+=1) BEGIN //Otherwise, place the old item in inventory
                  PATCH_IF $ref("%j%") = "-1" BEGIN
                    WRITE_SHORT itm_slt + 0x2*j $ref("%i%")
                    j=37
                  END
                END
              END
              WRITE_SHORT itm_slt + 0x2*i num_itm
              added = 1
              f_Flags |= 2
              i = upper_bound
            END
          END
        END
      END
    END
    PATCH_IF added = 1 AND lower_bound = 9 BEGIN //yet more bloat, select the highest ranked weapon, unless there are undroppable or unranked magical weapons
      flags2 = 4
      cre_flags = 0
      READ_SHORT itm_slt + 0x2*38 selected ELSE "-2"
      READ_SSHORT itm_slt + 0x2*(9 + selected) ref ELSE "-2"
      PATCH_IF ref >= 0 BEGIN
        READ_ASCII itm_off + 0x14*ref item ELSE flblank
        READ_BYTE  itm_off + 0x14*ref + 0x10 cre_flags ELSE 8
        PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" AND (cre_flags BAND 8) = 0 BEGIN
          INNER_ACTION BEGIN
            COPY_EXISTING "%item%.itm" override
              READ_BYTE 0x18 flags2 ELSE 0
            BUT_ONLY
          END
        END
      END
      PATCH_IF (flags2 BAND 4) = 4 AND (cre_flags BAND 8) = 0 BEGIN
        highest = 0
        write_ref = "-1"
        weapon_ref = "-1"
        FOR (i=lower_bound;i<upper_bound;i+=1) BEGIN
          weapon_ref += 1
          READ_SSHORT itm_slt + 0x2*i ref ELSE "-2"
          PATCH_IF ref >= 0 BEGIN
            READ_ASCII itm_off + 0x14*ref item ELSE flblank
            READ_BYTE  itm_off + 0x14*ref + 0x10 cre_flags2 ELSE 8
            flags2 = 4
            PATCH_IF FILE_EXISTS_IN_GAME "%item%.itm" BEGIN
              INNER_ACTION BEGIN
                COPY_EXISTING "%item%.itm" override
                  READ_BYTE 0x18 flags2 ELSE 4
                  LPF read_item_prof RET prof = f_Prof END
                BUT_ONLY
              END
              TO_LOWER item
              PATCH_IF (cre_flags2 BAND 8) = 8 OR (flags2 BAND 4) = 0 OR (!VARIABLE_IS_SET $fl#gear#itemrank("%item%") AND (flags2 BAND 64) = 64) BEGIN
                i = upper_bound
                write_ref = weapon_ref
              END ELSE PATCH_IF VARIABLE_IS_SET $fl#gear#itemrank("%item%") BEGIN
                write_ref = highest < $fl#gear#itemrank("%item%")*(3/2)*$rcp_prof("%prof%")
                AND (prof != 103 AND prof != 27 AND !(prof = 95 AND BG1_STYLE_PROFS) OR ((prof = 103 OR prof = 27 OR (prof = 95 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2)) //Only select a ranged weapon if it's the best weapon you have and if your prof is >2
                AND (prof != 104 AND prof != 15 AND !(prof = 89 AND BG1_STYLE_PROFS) OR ((prof = 104 OR prof = 15 OR (prof = 89 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                AND (prof != 105 AND prof != 15 AND !(prof = 89 AND BG1_STYLE_PROFS) OR ((prof = 105 OR prof = 15 OR (prof = 89 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                AND (prof != 107 AND prof != 18 AND !(prof = 95 AND BG1_STYLE_PROFS) OR ((prof = 107 OR prof = 18 OR (prof = 95 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                ? weapon_ref : write_ref
                highest = highest < $fl#gear#itemrank("%item%")*(3/2)*$rcp_prof("%prof%")
                AND (prof != 103 AND prof != 27 AND !(prof = 95 AND BG1_STYLE_PROFS) OR ((prof = 103 OR prof = 27 OR (prof = 95 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                AND (prof != 104 AND prof != 15 AND !(prof = 89 AND BG1_STYLE_PROFS) OR ((prof = 104 OR prof = 15 OR (prof = 89 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                AND (prof != 105 AND prof != 15 AND !(prof = 89 AND BG1_STYLE_PROFS) OR ((prof = 105 OR prof = 15 OR (prof = 89 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2))
                AND (prof != 107 AND prof != 18 AND !(prof = 95 AND BG1_STYLE_PROFS) OR ((prof = 107 OR prof = 18 OR (prof = 95 AND BG1_STYLE_PROFS)) AND $rcp_prof("%prof%") > 2)) //!(prof != 95 AND cat = 18 AND !BG1_STYLE_PROFS)
                ? $fl#gear#itemrank("%item%")*(3/2)*$rcp_prof("%prof%") : highest
              END
            END
          END
        END
        PATCH_IF write_ref >= 0 BEGIN
          WRITE_SHORT itm_slt + 0x2*38 write_ref
        END
      END
    END
    //ad-hoc fix: select the first weapon if no weapon is selected
    READ_SHORT  itm_slt + 0x2*38 selected
    READ_SSHORT itm_slt + 0x2*(9 + selected) ref ELSE "-2"
    PATCH_IF ref = "-1" BEGIN
      FOR (q = 9; q < 13; ++q) BEGIN
        READ_SSHORT itm_slt + 0x2*q ref ELSE "-2"
        PATCH_IF ref >= 0 BEGIN
          WRITE_SHORT itm_slt + 0x2*38 q - 9
          q = 13
        END
      END
    END
  END
  PATCH_IF added = 0 BEGIN //If we were unable to equip it or swap it in, place the item in inventory
    FOR (i=21;i<37;i+=1) BEGIN
      READ_SSHORT itm_slt + 0x2*i ref ELSE "-2"
      PATCH_IF ref = "-1" BEGIN
        WRITE_SHORT itm_slt + 0x2*i num_itm
        i = 37
      END
    END
  END
  WRITE_BYTE itm_off + 0x14*num_itm + 0x10 f_Flags
  WRITE_LONG 0x2c0 num_itm + 1
  PATCH_FOR_EACH off IN 0x2a0 0x2a8 0x2b0 0x2b8 0x2c4 BEGIN
    READ_LONG off off_value ELSE 0
    PATCH_IF (off_value > itm_off) OR (off_value = itm_off AND num_itm = 0) BEGIN
      WRITE_LONG off off_value + adjust
    END
  END
END

DEFINE_PATCH_MACRO define_itm_slot_range BEGIN
  lower_bound = riu_category = 1 ? 6 : riu_category = 2 ? 1 : riu_category = 3 ? 7 : riu_category = 4 ? 8 : riu_category = 6 ? 3 : riu_category = 7 ? 0 : riu_category = 10 ? 4 : riu_category = 12 ? 2 : riu_category = 15 OR riu_category = 27 OR riu_category = 25 OR riu_category = 17 OR riu_category = 23 OR riu_category = 22 OR riu_category = 16 OR riu_category = 30 OR riu_category = 26 OR riu_category = 19 OR riu_category = 20 OR riu_category = 21 OR riu_category = 18 OR riu_category = 29 ? 9 : riu_category = 32 ? 17 : riu_category = 35 ? 18 : 21
  upper_bound = riu_category = 1 ? 7 : riu_category = 2 ? 2 : riu_category = 3 ? 8 : riu_category = 4 ? 9 : riu_category = 6 ? 4 : riu_category = 7 ? 1 : riu_category = 10 ? 6 : riu_category = 12 ? 3 : riu_category = 15 OR riu_category = 27 OR riu_category = 25 OR riu_category = 17 OR riu_category = 23 OR riu_category = 22 OR riu_category = 16 OR riu_category = 30 OR riu_category = 26 OR riu_category = 19 OR riu_category = 20 OR riu_category = 21 OR riu_category = 18 OR riu_category = 29 ? 13 : riu_category = 32 ? 18 : riu_category = 35 ? 21 : 37
END

// Needs to be updated to account for IWD-style weap profs (2163, 2164)
DEFINE_PATCH_MACRO read_cre_profs BEGIN
  READ_BYTE 0x6e rcp_large ELSE 0
  READ_BYTE 0x6f rcp_small ELSE 0
  READ_BYTE 0x70 rcp_bow   ELSE 0
  READ_BYTE 0x71 rcp_spear ELSE 0
  READ_BYTE 0x72 rcp_blunt ELSE 0
  READ_BYTE 0x73 rcp_spike ELSE 0
  READ_BYTE 0x74 rcp_axe   ELSE 0
  READ_BYTE 0x75 rcp_miss  ELSE 0
  SET BG1_STYLE_PROFS = 0
  PATCH_IF (BG1 = 1 AND Tutu = 0 AND BGT = 0) AND !GAME_IS ~bgee~ BEGIN //BG1
    PATCH_FOR_EACH rcp_prof IN 22 23 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_spike
    END
    PATCH_FOR_EACH rcp_prof IN 17 21 26 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_blunt
    END
    SET $rcp_prof(25) = rcp_axe
    SET $rcp_prof(15) = rcp_bow
    PATCH_FOR_EACH rcp_prof IN 16 19 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_small
    END
    PATCH_FOR_EACH rcp_prof IN 24 18 27 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_miss
    END
    PATCH_FOR_EACH rcp_prof IN 30 29 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_spear
    END
    SET $rcp_prof(20) = rcp_large
  END ELSE PATCH_IF MOD_IS_INSTALLED bg2_tweaks.tp2 2161 OR
                    MOD_IS_INSTALLED bg2_tweaks.tp2 2162 OR
                    MOD_IS_INSTALLED cdtweaks.tp2 2161 OR
                    MOD_IS_INSTALLED cdtweaks.tp2 2162
  BEGIN //BG1-style proficiency
    SET BG1_STYLE_PROFS = 1
    SET $rcp_prof(89) = rcp_bow
    SET $rcp_prof(90) = rcp_spike
    SET $rcp_prof(91) = rcp_small
    SET $rcp_prof(92) = rcp_large
    SET $rcp_prof(93) = rcp_axe
    SET $rcp_prof(94) = rcp_blunt
    SET $rcp_prof(95) = rcp_miss
    SET $rcp_prof(96) = rcp_spear
  END ELSE BEGIN //BG2 proficiency
    PATCH_FOR_EACH rcp_prof IN 89 90 93 94 95 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_large
    END
    PATCH_FOR_EACH rcp_prof IN 91 96 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_small
    END
    PATCH_FOR_EACH rcp_prof IN 97 115 101 102 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_blunt
    END
    PATCH_FOR_EACH rcp_prof IN 104 105 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_bow
    END
    PATCH_FOR_EACH rcp_prof IN 103 106 107 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_miss
    END
    PATCH_FOR_EACH rcp_prof IN 98 99 BEGIN
      SET $rcp_prof("%rcp_prof%") = rcp_spear
    END
    SET $rcp_prof(92) = rcp_axe
    SET $rcp_prof(100) = rcp_spike
  END
  READ_LONG 0x2c4 rcp_fx_off ELSE 0
  READ_LONG 0x2c8 rcp_num_fx ELSE 0
  FOR (rcp1=0;rcp1<rcp_num_fx;rcp1+=1) BEGIN
    READ_LONG rcp_fx_off + 0x108*i + 0x8  rcp_fx_type ELSE 999
    READ_LONG rcp_fx_off + 0x108*i + 0x14 rcp_param1 ELSE 0
    READ_LONG rcp_fx_off + 0x108*i + 0x18 rcp_param2 ELSE 0
    PATCH_IF rcp_fx_type = 233 BEGIN
      SET $rcp_prof("%rcp_param2%") = rcp_param1
    END
  END
END

DEFINE_PATCH_MACRO read_itm_unusabilities BEGIN
  READ_BYTE  0x18 riu_itm_flags1 ELSE 0
  READ_SHORT 0x1c riu_category ELSE 0
  READ_BYTE  0x1e riu_itm_unuse1 ELSE 0
  READ_BYTE  0x1f riu_itm_unuse2 ELSE 0
  READ_BYTE  0x20 riu_itm_unuse3 ELSE 0
  READ_BYTE  0x21 riu_itm_unuse4 ELSE 0
  READ_BYTE  0x29 riu_itm_kit_unuse1 ELSE 0
  READ_BYTE  0x2b riu_itm_kit_unuse2 ELSE 0
  READ_BYTE  0x2d riu_itm_kit_unuse3 ELSE 0
  READ_BYTE  0x2f riu_itm_kit_unuse4 ELSE 0
END

DEFINE_PATCH_MACRO define_cre_unusabilities BEGIN //Tedious monkey-work. What we are doing here is constructing unusability bytes based on the cre in order to compare them to the unusability bytes of the item, so we don't equip mages with two-handed swords and what have you.
  READ_LONG 0x244 dcu_kit ELSE 0
  READ_BYTE 0x272 dcu_race ELSE 0
  READ_BYTE 0x273 dcu_class ELSE 0
  READ_BYTE 0x27b dcu_alignment ELSE 0
  dcu_cre_unuse1 = 0
  dcu_cre_unuse2 = 0
  dcu_cre_unuse3 = 0
  dcu_cre_unuse4 = 0
  dcu_cre_kit_unuse1 = 0
  dcu_cre_kit_unuse2 = 0
  dcu_cre_kit_unuse3 = 0
  dcu_cre_kit_unuse4 = 0
  dcu_cre_unuse1 = dcu_alignment = 17 ? 0b00010100 : dcu_alignment = 33 ? 0b00100100 : dcu_alignment = 49 ? 0b00000101 : dcu_alignment = 18 ? 0b00011000 : dcu_alignment = 34 ? 0b00101000 : dcu_alignment = 50 ? 0b0001001 : dcu_alignment = 19 ? 0b00010010 : dcu_alignment = 35 ? 0b00100010 : dcu_alignment = 51 ? 0b00000011 : dcu_cre_unuse1
  dcu_cre_unuse1 = dcu_class = 5 ? dcu_cre_unuse1 BOR 0b01000000 : dcu_class = 3 ? dcu_cre_unuse1 BOR 0b10000000 : dcu_cre_unuse1
  dcu_cre_unuse2 = dcu_class = 17 ? 0b10000000 : dcu_class = 8 ? 0b01000000 : dcu_class = 7 ? 0b00100000 : dcu_class = 16 ? 0b00010000 : dcu_class = 2 ? 0b00001000 : dcu_class = 18 ? 0b00000100 : dcu_class = 15 ? 0b00000010 : dcu_class = 14 ? 0b00000001 : dcu_cre_unuse2
  dcu_cre_unuse3 = dcu_class = 10 ? 0b00000001 : dcu_class = 9 ? 0b00000010 : dcu_class = 1 ? 0b00000100 : dcu_class = 13 ? 0b00001000 : dcu_class = 6 ? 0b00010000 : dcu_class = 12 ? 0b00100000 : dcu_class = 4 ? 0b01000000 : dcu_cre_unuse3
  dcu_cre_unuse3 = dcu_race = 2 ? dcu_cre_unuse3 BOR 0b10000000 : dcu_cre_unuse3
  dcu_cre_unuse4 = dcu_race = 4 ? 0b00000001 : dcu_race = 3 ? 0b00000010 : dcu_race = 5 ? 0b00000100 : dcu_race = 1 ? 0b00001000 : dcu_race = 6 ? 0b00010000 : dcu_race = 7 ? 0b10000000 : dcu_cre_unuse4
  dcu_cre_unuse4 = dcu_class = 20 ? dcu_cre_unuse4 BOR 0b00100000 : dcu_class = 11 ? dcu_cre_unuse4 BOR 0b01000000 : dcu_cre_unuse4
  dcu_cre_kit_unuse1 = dcu_kit = 0x40130000 ? 0b00000001 : dcu_kit = 0x40140000 ? 0b00000010 : dcu_kit = 0x40150000 ? 0b00000100 : dcu_kit = 0x40100000 ? 0b00001000 : dcu_kit = 0x40110000 ? 0b00010000 : dcu_kit = 0x40120000 ? 0b00100000 : dcu_kit = 0x00004000 ? 0b01000000 : dcu_kit = 0x00008000 ? 0b10000000 : dcu_cre_kit_unuse1
  dcu_cre_kit_unuse2 = dcu_kit = 0x40080000 ? 0b00000001 : dcu_kit = 0x40090000 ? 0b00000010 : dcu_kit = 0x400a0000 ? 0b00000100 : dcu_kit = 0x400b0000 ? 0b00001000 : dcu_kit = 0x400c0000 ? 0b00010000 : dcu_kit = 0x400d0000 ? 0b00100000 : dcu_kit = 0x400e0000 ? 0b01000000 : dcu_kit = 0x400f0000 ? 0b10000000 : dcu_cre_kit_unuse2
  dcu_cre_kit_unuse3 = dcu_kit = 0x01000000 ? 0b00000001 : dcu_kit = 0x02000000 ? 0b00000010 : dcu_kit = 0x04000000 ? 0b00000100 : dcu_kit = 0x08000000 ? 0b00001000 : dcu_kit = 0x10000000 ? 0b00010000 : dcu_kit = 0x20000000 ? 0b00100000 : dcu_kit = 0x40070000 ? 0b10000000 : dcu_cre_kit_unuse3
  dcu_cre_kit_unuse3 = dcu_kit != 0 AND dcu_kit != 0x40000000 ? dcu_cre_kit_unuse3 BOR 0b01000000 : dcu_cre_kit_unuse3
  dcu_cre_kit_unuse4 = dcu_kit = 0x40010000 ? 0b00000001 : dcu_kit = 0x40020000 ? 0b00000010 : dcu_kit = 0x40030000 ? 0b00000100 : dcu_kit = 0x40040000 ? 0b00001000 : dcu_kit = 0x40050000 ? 0b00010000 : dcu_kit = 0x40060000 ? 0b00100000 : dcu_kit = 0x00400000 ? 0b01000000 : dcu_kit = 0x00800000 ? 0b10000000 : dcu_cre_kit_unuse4
END

DEFINE_PATCH_FUNCTION read_item_prof INT_VAR f_BG1_default = 20 f_BG2_default = 90 RET f_Prof BEGIN
  PATCH_IF BG1 = 1 AND Tutu = 0 AND BGT = 0 AND !GAME_IS ~bgee~ BEGIN
    READ_SHORT 0x1c f_Prof ELSE f_BG1_default
  END ELSE BEGIN
    READ_BYTE  0x31 f_Prof ELSE f_BG2_default
  END
END
